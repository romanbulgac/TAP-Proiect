@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="min-h-screen bg-gray-50">
    <div class="flex">
        <!-- Sidebar with collapsible navigation -->
        <aside class="flex flex-col bg-white shadow-md fixed h-full transition-all duration-300 @(isCollapsed ? "w-16" : "w-64") overflow-hidden z-50">
            <div class="flex items-center justify-between p-4 border-b border-gray-200">
                <div class="flex items-center">
                    <img src="/images/logo.png" alt="Logo" class="h-8 w-8" onerror="this.src='data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 24 24\' width=\'24\' height=\'24\'><path fill=\'none\' d=\'M0 0h24v24H0z\'/><path d=\'M3 3h18a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zm1 2v14h16V5H4zm8 10h6v2h-6v-2zm-3.333-3L5.838 9.172l1.415-1.415L11.495 12l-4.242 4.243-1.415-1.415L8.667 12z\' fill=\'%234F46E5\'/></svg>'" />
                    @if (!isCollapsed)
                    {
                        <span class="ml-3 text-lg font-semibold text-gray-800">EduPortal</span>
                    }
                </div>
                <button @onclick="ToggleSidebar" class="text-gray-500 hover:text-gray-600 focus:outline-none">
                    @if (isCollapsed)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                    }
                </button>
            </div>
            
            <div class="overflow-y-auto flex-1 py-4">
                <AuthorizeView>
                    <Authorized>
                        <NavLink href="/" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()" Match="NavLinkMatch.All">
                            <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                            </svg>
                            @if (!isCollapsed)
                            {
                                <span class="ml-3">Dashboard</span>
                            }
                        </NavLink>
                        
                        <NavLink href="/profile" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                            @if (!isCollapsed)
                            {
                                <span class="ml-3">Profile</span>
                            }
                        </NavLink>
                        
                        <AuthorizeView Roles="Student">
                            <Authorized Context="studentContext">
                                <NavLink href="/consultations" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    @if (!isCollapsed)
                                    {
                                        <span class="ml-3">My Consultations</span>
                                    }
                                </NavLink>
                                
                                <NavLink href="/bookings" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    @if (!isCollapsed)
                                    {
                                        <span class="ml-3">Book Consultation</span>
                                    }
                                </NavLink>
                            </Authorized>
                        </AuthorizeView>
                        
                        <AuthorizeView Roles="Teacher">
                            <Authorized Context="teacherContext">
                                <NavLink href="/my-consultations" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    @if (!isCollapsed)
                                    {
                                        <span class="ml-3">My Schedule</span>
                                    }
                                </NavLink>
                                
                                <NavLink href="/availability" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                    </svg>
                                    @if (!isCollapsed)
                                    {
                                        <span class="ml-3">Set Availability</span>
                                    }
                                </NavLink>
                            </Authorized>
                        </AuthorizeView>
                        
                        <AuthorizeView Roles="Administrator">
                            <Authorized Context="adminContext">
                                <NavLink href="/admin/users" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                    </svg>
                                    @if (!isCollapsed)
                                    {
                                        <span class="ml-3">Manage Users</span>
                                    }
                                </NavLink>
                                
                                <NavLink href="/admin/statistics" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                                    </svg>
                                    @if (!isCollapsed)
                                    {
                                        <span class="ml-3">Statistics</span>
                                    }
                                </NavLink>
                            </Authorized>
                        </AuthorizeView>
                        
                        <NavLink href="/materials" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                            </svg>
                            @if (!isCollapsed)
                            {
                                <span class="ml-3">Materials</span>
                            }
                        </NavLink>
                        
                        <NavLink href="/my-notifications" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 00-4-5.659V5a2 2 0 10-4 0v0.341C7.67 6.165 6 8.388 6 11v3.159c0 0.538-0.214 1.055-0.595 1.436L4 17h5m6 0v1a3 3 0 01-6 0v-1m6 0H9" />
                            </svg>
                            @if (!isCollapsed)
                            {
                                <span class="ml-3">Notifications</span>
                            }
                        </NavLink>
                        
                        <div class="border-t border-gray-200 my-2"></div>
                        
                        <NavLink href="/logout" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                            </svg>
                            @if (!isCollapsed)
                            {
                                <span class="ml-3">Log out</span>
                            }
                        </NavLink>
                    </Authorized>
                    <NotAuthorized>
                        <NavLink href="/login" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                            </svg>
                            @if (!isCollapsed)
                            {
                                <span class="ml-3">Sign In</span>
                            }
                        </NavLink>
                        
                        <NavLink href="/register" class="@GetNavLinkClass()" ActiveClass="@GetActiveNavLinkClass()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="@GetNavIconClass()" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                            </svg>
                            @if (!isCollapsed)
                            {
                                <span class="ml-3">Register</span>
                            }
                        </NavLink>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </aside>

        <!-- Main content with responsive margin -->
        <div class="flex-1 transition-all duration-300 @(isCollapsed ? "ml-16" : "ml-64")">
            <header class="sticky top-0 z-40 flex h-16 items-center border-b border-gray-200 bg-white px-6">
                <div class="flex items-center justify-between w-full">
                    <div>
                        <h2 class="text-xl font-semibold text-gray-800">EduPortal</h2>
                    </div>
                    
                    <div class="flex items-center space-x-4">
                        <AuthorizeView>
                            <Authorized>
                                <button @onclick="NavigateToNotifications" class="text-gray-600 hover:text-gray-800 focus:outline-none relative">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 00-4-5.659V5a2 2 0 10-4 0v0.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 01-6 0v-1m6 0H9" />
                                    </svg>
                                    @* Conditionally show notification badge based on actual notifications *@
                                    @* <span class="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-600 ring-1 ring-white"></span> *@
                                </button>
                                
                                <div class="relative" data-profile-menu>
                                    <button @onclick="ToggleProfileMenu" data-profile-menu-toggle class="flex items-center text-sm font-medium text-gray-700 hover:text-gray-800 focus:outline-none">
                                        <span class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-semibold">
                                            @GetUserInitials(context.User)
                                        </span>
                                        @if (!isCollapsed)
                                        {
                                            <span class="ml-2">@GetUserDisplayName(context.User)</span>
                                            <svg class="ml-1 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                            </svg>
                                        }
                                    </button>
                                    
                                    @if (isProfileMenuOpen)
                                    {
                                        <div class="profile-menu absolute right-0 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50">
                                            <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Your Profile</a>
                                            <a href="/logout" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign out</a>
                                        </div>
                                    }
                                </div>
                            </Authorized>
                            <NotAuthorized>
                                <NavLink href="/login" class="text-sm font-medium text-gray-700 hover:text-gray-900">Sign In</NavLink>
                                <NavLink href="/register" class="ml-4 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded-md">Register</NavLink>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
            </header>
            
            <main class="p-6">
                @Body
            </main>
        </div>
    </div>
</div>

@code {
    private bool isCollapsed = false;
    private bool isProfileMenuOpen = false;
    private DotNetObjectReference<MainLayout>? _dotNetReference;
    
    protected override async Task OnInitializedAsync()
    {
        // It's good practice to initialize the DotNetObjectReference here if it's needed early,
        // but for DOM interop, OnAfterRenderAsync is usually the place.
        // For this click-outside listener, OnAfterRenderAsync is correct.
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetReference = DotNetObjectReference.Create(this);
            try
            {
                await JSRuntime.InvokeVoidAsync("setupClickOutsideListener", _dotNetReference);
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error setting up click outside listener: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public void CloseProfileMenu()
    {
        if (isProfileMenuOpen)
        {
            isProfileMenuOpen = false;
            InvokeAsync(StateHasChanged); // Ensure UI updates on the correct thread
        }
    }
    
    private void ToggleSidebar()
    {
        isCollapsed = !isCollapsed;
    }
    
    private void ToggleProfileMenu()
    {
        isProfileMenuOpen = !isProfileMenuOpen;
    }
    
    private void NavigateToNotifications()
    {
        NavigationManager.NavigateTo("/my-notifications");
    }
    
    private string GetUserInitials(ClaimsPrincipal user)
    {
        var name = user.Identity?.Name;
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Split(new[] { ' ', '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1) return parts[0].Length > 1 ? parts[0].Substring(0, 2).ToUpper() : parts[0].ToUpper();
        return (parts[0].Substring(0, 1) + parts[parts.Length - 1].Substring(0, 1)).ToUpper();
    }

    private string GetUserDisplayName(ClaimsPrincipal user)
    {
        return user.Identity?.Name ?? "User";
    }

    private string GetNavLinkClass()
    {
        return "flex items-center px-3 py-2.5 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 hover:text-gray-900 transition-colors duration-150";
    }

    private string GetActiveNavLinkClass()
    {
        return "bg-blue-50 text-blue-700"; // Example active class
    }
    
    private string GetNavIconClass()
    {
        return "h-5 w-5 mr-3 text-gray-500"; // Common icon class
    }

    public void Dispose()
    {
        if (_dotNetReference != null)
        {
            try
            {
                // It's good practice to check if JSRuntime is available,
                // though in Blazor WASM it usually is during Dispose.
                _ = JSRuntime.InvokeVoidAsync("removeClickOutsideListener");
            }
            catch (JSDisconnectedException)
            {
                // Handle cases where JS interop is no longer available (e.g., during page unload)
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error removing click outside listener: {ex.Message}");
            }
            _dotNetReference.Dispose();
            _dotNetReference = null;
        }
    }
}