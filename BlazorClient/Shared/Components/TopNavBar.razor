@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="flex items-center justify-between w-full">
    <!-- Left side of header -->
    <div>
        <h1 class="text-notion-text-light text-lg">Mathematics Consultation Platform</h1>
    </div>
    
    <!-- Right side of header with notifications and user -->
    <div class="flex items-center space-x-4">
        <AuthorizeView>
            <Authorized>
                <BlazorClient.Shared.Components.NotificationsBell />
                
                <div class="relative">
                    <button @onclick="ToggleUserMenu" class="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <span class="sr-only">Open user menu</span>
                        @if (UserHasProfilePicture())
                        {
                            <img class="h-8 w-8 rounded-full" src="@GetUserProfilePicture()" alt="Profile picture">
                        }
                        else
                        {
                            <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                                <span class="font-medium text-blue-800">@GetUserInitials()</span>
                            </div>
                        }
                        <div class="hidden md:flex md:items-center ml-2">
                            <span class="text-sm text-gray-700 mr-1">@GetUserName()</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                    </button>
                    
                    @if (isUserMenuOpen)
                    {
                        <div class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
                            <div class="py-1">
                                <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    Your Profile
                                </a>
                                <a href="/settings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    Settings
                                </a>
                                <button @onclick="Logout" class="w-full text-left block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    Sign out
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="flex items-center space-x-4">
                    <a href="/login" class="text-blue-600 hover:text-blue-800 px-3 py-2 rounded-md text-sm font-medium">
                        Login
                    </a>
                    <a href="/register" class="bg-blue-600 text-white hover:bg-blue-700 px-3 py-2 rounded-md text-sm font-medium">
                        Register
                    </a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool isUserMenuOpen = false;
    private string? userName;
    private string? userInitials;
    private string? profilePicture;
    
    [CascadingParameter]
    private Task<AuthenticationState>? authStateTask { get; set; }
    
    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }
    
    private async Task Logout()
    {
        if (AuthStateProvider is CustomAuthenticationStateProvider customAuth)
        {
            await customAuth.MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("/login");
        }
    }
    
    private string GetUserName()
    {
        return userName ?? "User";
    }
    
    private string GetUserInitials()
    {
        return userInitials ?? "U";
    }
    
    private string GetUserProfilePicture()
    {
        return profilePicture ?? "";
    }
    
    private bool UserHasProfilePicture()
    {
        return !string.IsNullOrEmpty(profilePicture);
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (authStateTask != null)
        {
            var authState = await authStateTask;
            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                // Get user info from claims
                var user = authState.User;
                var firstName = user.FindFirst(ClaimTypes.GivenName)?.Value ?? "";
                var lastName = user.FindFirst(ClaimTypes.Surname)?.Value ?? "";
                
                userName = string.IsNullOrEmpty(firstName) && string.IsNullOrEmpty(lastName) 
                    ? user.FindFirst(ClaimTypes.Name)?.Value ?? "User"
                    : $"{firstName} {lastName}".Trim();
                
                userInitials = !string.IsNullOrEmpty(firstName) && !string.IsNullOrEmpty(lastName)
                    ? $"{firstName[0]}{lastName[0]}"
                    : !string.IsNullOrEmpty(firstName)
                        ? firstName[0].ToString()
                        : "U";
                
                profilePicture = user.FindFirst("ProfilePicture")?.Value;
            }
        }
    }
}
