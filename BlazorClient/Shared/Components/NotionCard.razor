@inject NavigationManager NavigationManager

<div class="@GetCardClasses()" @onclick="HandleClick" @attributes="AdditionalAttributes">
    @if (!string.IsNullOrEmpty(Title))
    {
        <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">@Title</h3>
            @if (!string.IsNullOrEmpty(Subtitle))
            {
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">@Subtitle</p>
            }
        </div>
    }
    @ChildContent
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Subtitle { get; set; }

    [Parameter]
    public bool Interactive { get; set; }

    [Parameter]
    public bool Hoverable { get; set; } = true;

    [Parameter]
    public string? Href { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetCardClasses()
    {
        var baseClasses = "bg-white dark:bg-gray-800 rounded-xl shadow-soft p-6 transition-all duration-200";
        
        if (Hoverable)
        {
            baseClasses += " hover:shadow-soft-lg";
            if (Interactive)
            {
                baseClasses += " transform hover:-translate-y-1 cursor-pointer";
            }
        }

        return baseClasses;
    }

    private async Task HandleClick(MouseEventArgs args)
    {
        if (!string.IsNullOrEmpty(Href))
        {
            NavigationManager.NavigateTo(Href);
        }
        else if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(args);
        }
    }
}
