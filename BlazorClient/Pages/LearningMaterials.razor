@page "/my-materials"
@using System.Security.Claims
@using BlazorClient.Services
@using DataAccess.Models
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Learning Materials</PageTitle>

<div class="bg-white shadow-md rounded-lg p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-semibold text-gray-800">My Learning Materials</h1>
        <button @onclick="OpenUploadDialog" class="flex items-center bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Upload Material
        </button>
    </div>

    @if (isLoading)
    {
        <div class="flex justify-center my-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
    }
    else if (materials.Count == 0)
    {
        <div class="bg-gray-50 rounded-lg p-8 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
            </svg>
            <h3 class="text-lg font-medium text-gray-900">No materials yet</h3>
            <p class="mt-2 text-gray-600">Get started by uploading your first learning material.</p>
            <button @onclick="OpenUploadDialog" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200">
                Upload Material
            </button>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            @foreach (var material in materials)
            {
                <div class="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                    <div class="p-4 flex items-start justify-between">
                        <div>
                            <div class="flex items-center">
                                @* Show different icons based on file type *@
                                @if (material.FileType.Contains("pdf"))
                                {
                                    <span class="text-red-600 text-xl mr-2">üìï</span>
                                }
                                else if (material.FileType.Contains("word") || material.FileType.Contains("document"))
                                {
                                    <span class="text-blue-600 text-xl mr-2">üìò</span>
                                }
                                else if (material.FileType.Contains("excel") || material.FileType.Contains("sheet"))
                                {
                                    <span class="text-green-600 text-xl mr-2">üìó</span>
                                }
                                else if (material.FileType.Contains("image"))
                                {
                                    <span class="text-purple-600 text-xl mr-2">üñºÔ∏è</span>
                                }
                                else if (material.FileType.Contains("video"))
                                {
                                    <span class="text-yellow-600 text-xl mr-2">üé¨</span>
                                }
                                else 
                                {
                                    <span class="text-gray-600 text-xl mr-2">üìÑ</span>
                                }
                                
                                <h3 class="font-medium text-gray-900 truncate" title="@material.Title">@material.Title</h3>
                            </div>
                            <p class="text-sm text-gray-500 mt-1 truncate" title="@material.Description">@material.Description</p>
                            <div class="flex items-center mt-2 text-xs text-gray-600">
                                <span>@FormatFileSize(material.FileSize)</span>
                                <span class="mx-1">‚Ä¢</span>
                                <span>@material.UploadedAt.ToString("MMM dd, yyyy")</span>
                            </div>
                        </div>
                        <div class="flex">
                            <button @onclick="() => DownloadMaterial(material)" class="p-1 text-gray-500 hover:text-gray-700 focus:outline-none" title="Download">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                                </svg>
                            </button>
                            <button @onclick="() => DeleteMaterial(material.Id)" class="p-1 text-gray-500 hover:text-red-600 focus:outline-none" title="Delete">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showUploadDialog)
{
    <div class="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50" @onclick="CloseUploadDialog">
        <div class="bg-white rounded-lg max-w-md w-full mx-4 overflow-hidden shadow-xl" @onclick:stopPropagation>
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg font-medium text-gray-900">Upload Learning Material</h3>
                <button @onclick="CloseUploadDialog" class="text-gray-400 hover:text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div class="p-6">
                <div class="mb-4">
                    <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                    <input type="text" id="title" @bind="newMaterial.Title" 
                           class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm" 
                           placeholder="Enter material title" />
                </div>
                <div class="mb-4">
                    <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea id="description" @bind="newMaterial.Description"
                              class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                              rows="3" placeholder="Enter description"></textarea>
                </div>
                <div class="mb-4">
                    <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
                    <select id="subject" @bind="newMaterial.Subject"
                            class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                        <option value="">-- Select Subject --</option>
                        <option value="Algebra">Algebra</option>
                        <option value="Geometry">Geometry</option>
                        <option value="Calculus">Calculus</option>
                        <option value="Statistics">Statistics</option>
                        <option value="Trigonometry">Trigonometry</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-1">File</label>
                    <div class="border-2 border-dashed border-gray-300 rounded-md px-6 pt-5 pb-6 cursor-pointer hover:border-gray-400"
                         @onclick="BrowseFile">
                        <div class="space-y-1 text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            <div class="flex text-sm text-gray-600 justify-center">
                                <label class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500">
                                    <span>Click to upload a file</span>
                                    <input id="file-upload" name="file-upload" type="file" class="sr-only" />
                                </label>
                            </div>
                            <p class="text-xs text-gray-500">PDF, DOCX, XLSX, PPT, JPG, PNG up to 10MB</p>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedFileName))
                    {
                        <div class="mt-2 text-sm text-gray-700 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            <span class="truncate">@selectedFileName</span>
                        </div>
                    }
                </div>
                <div class="flex justify-end space-x-3">
                    <button @onclick="CloseUploadDialog" class="px-4 py-2 text-sm text-gray-700 hover:text-gray-900">
                        Cancel
                    </button>
                    <button @onclick="UploadMaterial" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded">
                        Upload
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<LearningMaterial> materials = new List<LearningMaterial>();
    private bool showUploadDialog = false;
    private LearningMaterial newMaterial = new LearningMaterial();
    private string selectedFileName = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMaterialsAsync();
    }
    
    private async Task LoadMaterialsAsync()
    {
        try
        {
            // In a real app, you'd fetch this from your API
            // Example: var result = await Http.GetFromJsonAsync<List<LearningMaterial>>("api/materials");
            
            // For demonstration, we'll create some sample data
            await Task.Delay(500); // Simulate network delay
            
            materials = new List<LearningMaterial>
            {
                new LearningMaterial {
                    Id = Guid.NewGuid(),
                    Title = "Introduction to Calculus",
                    Description = "Comprehensive guide to differential calculus with examples",
                    FileType = "application/pdf",
                    FileSize = 2500000,
                    UploadedAt = DateTime.Now.AddDays(-5),
                    Subject = "Calculus",
                    DownloadUrl = "#"
                },
                new LearningMaterial {
                    Id = Guid.NewGuid(),
                    Title = "Linear Algebra Cheat Sheet",
                    Description = "Quick reference guide for linear algebra concepts",
                    FileType = "application/pdf",
                    FileSize = 1200000,
                    UploadedAt = DateTime.Now.AddDays(-10),
                    Subject = "Algebra",
                    DownloadUrl = "#"
                },
                new LearningMaterial {
                    Id = Guid.NewGuid(),
                    Title = "Geometry Practice Problems",
                    Description = "Collection of practice problems for advanced geometry",
                    FileType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    FileSize = 1850000,
                    UploadedAt = DateTime.Now.AddDays(-15),
                    Subject = "Geometry",
                    DownloadUrl = "#"
                }
            };
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading materials: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "Error", "Failed to load materials", "error");
            isLoading = false;
        }
    }
    
    private void OpenUploadDialog()
    {
        newMaterial = new LearningMaterial();
        selectedFileName = string.Empty;
        showUploadDialog = true;
    }
    
    private void CloseUploadDialog()
    {
        showUploadDialog = false;
    }
    
    private async Task BrowseFile()
    {
        // In a real application, this would open a file dialog
        // Since we can't trigger a file input from code in Blazor, we'd use a hidden file input
        // and click it from JavaScript
        
        // For demo purposes, we'll just simulate a file being selected
        await Task.Delay(500);
        selectedFileName = "calculus-introduction.pdf";
        newMaterial.FileType = "application/pdf";
        newMaterial.FileSize = 1500000;
    }
    
    private async Task UploadMaterial()
    {
        if (string.IsNullOrWhiteSpace(newMaterial.Title) ||
            string.IsNullOrWhiteSpace(newMaterial.Subject) ||
            string.IsNullOrWhiteSpace(selectedFileName))
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Warning", "Please fill all required fields", "warning");
            return;
        }
        
        try
        {
            // In a real app, you'd upload the file and save the material info to your API
            // Example: await Http.PostAsJsonAsync("api/materials", newMaterial);
            
            // For demonstration, we'll just add it to our local list
            newMaterial.Id = Guid.NewGuid();
            newMaterial.UploadedAt = DateTime.Now;
            newMaterial.DownloadUrl = "#";
            
            materials.Add(newMaterial);
            
            await JSRuntime.InvokeVoidAsync("showToast", "Success", "Material uploaded successfully", "success");
            CloseUploadDialog();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading material: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "Error", "Failed to upload material", "error");
        }
    }
    
    private async Task DownloadMaterial(LearningMaterial material)
    {
        // In a real app, you'd redirect to a download endpoint
        // Example: NavigationManager.NavigateTo($"api/materials/{material.Id}/download");
        
        // For demonstration, we'll just show a toast
        await JSRuntime.InvokeVoidAsync("showToast", "Info", $"Downloading '{material.Title}'", "info");
    }
    
    private async Task DeleteMaterial(Guid id)
    {
        try
        {
            // In a real app, you'd call your API to delete the material
            // Example: await Http.DeleteAsync($"api/materials/{id}");
            
            // For demonstration, we'll just remove it from our local list
            materials.RemoveAll(m => m.Id == id);
            
            await JSRuntime.InvokeVoidAsync("showToast", "Success", "Material deleted successfully", "success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting material: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "Error", "Failed to delete material", "error");
        }
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        
        return $"{len:0.##} {sizes[order]}";
    }
    
    public class LearningMaterial
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Subject { get; set; } = string.Empty;
        public string FileType { get; set; } = string.Empty;
        public long FileSize { get; set; }
        public DateTime UploadedAt { get; set; }
        public string DownloadUrl { get; set; } = string.Empty;
    }
}
