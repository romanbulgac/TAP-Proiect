@page "/consultation/review/{ConsultationId:guid}"
@using System.Security.Claims
@using BlazorClient.Services
@using DataAccess.Models
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Review Consultation</PageTitle>

<div class="bg-white shadow-md rounded-lg p-6">
    @if (isLoading)
    {
        <div class="flex justify-center my-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
    }
    else if (consultation == null)
    {
        <div class="text-center my-12">
            <h2 class="text-xl text-gray-800 font-medium">Consultation not found</h2>
            <p class="text-gray-600 mt-2">The consultation you're looking for doesn't exist or you don't have permission to view it.</p>
            <button @onclick="GoBack" class="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded">
                Go Back
            </button>
        </div>
    }
    else
    {
        <div class="flex flex-col md:flex-row">
            <div class="w-full md:w-1/2">
                <h1 class="text-2xl font-semibold text-gray-800 mb-2">Review Consultation</h1>
                <p class="text-gray-600 mb-6">Share your experience with @consultation.TeacherName</p>
                
                <div class="bg-gray-50 rounded-lg p-4 mb-6">
                    <div class="flex items-start">
                        <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                            <span class="font-medium text-blue-800">@GetTeacherInitials()</span>
                        </div>
                        <div>
                            <h3 class="font-medium">@consultation.TeacherName</h3>
                            <p class="text-sm text-gray-600">@consultation.Subject</p>
                        </div>
                    </div>
                    <div class="mt-3 grid grid-cols-2 gap-3 text-sm text-gray-600">
                        <div>
                            <span class="font-medium">Date:</span> @consultation.StartTime.ToString("MMM dd, yyyy")
                        </div>
                        <div>
                            <span class="font-medium">Time:</span> @consultation.StartTime.ToString("h:mm tt") - @consultation.EndTime.ToString("h:mm tt")
                        </div>
                        <div>
                            <span class="font-medium">Duration:</span> @GetDuration()
                        </div>
                        <div>
                            <span class="font-medium">Status:</span> <span class="text-green-600 font-medium">Completed</span>
                        </div>
                    </div>
                </div>
                
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Rating</label>
                    <div class="flex items-center space-x-1">
                        @for (var i = 1; i <= 5; i++)
                        {
                            var rating = i;
                            <button @onclick="() => SetRating(rating)" class="p-1 focus:outline-none">
                                <svg class="h-8 w-8 @(rating <= review.Rating ? "text-yellow-400" : "text-gray-300")" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                </svg>
                            </button>
                        }
                        <span class="ml-2 text-sm text-gray-600">@GetRatingText()</span>
                    </div>
                </div>
                
                <div class="mb-6">
                    <label for="comment" class="block text-sm font-medium text-gray-700 mb-2">Comments</label>
                    <textarea id="comment" @bind="review.Comment"
                              class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                              rows="5" placeholder="Share your experience with this consultation..."></textarea>
                </div>
                
                <div class="flex justify-between items-center">
                    <button @onclick="GoBack" class="px-4 py-2 text-gray-600 hover:text-gray-800">
                        Cancel
                    </button>
                    <button @onclick="SubmitReview" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded">
                        Submit Review
                    </button>
                </div>
            </div>
            
            <div class="w-full md:w-1/2 md:pl-8 mt-8 md:mt-0">
                <h2 class="text-lg font-medium text-gray-800 mb-4">Consultation Summary</h2>
                
                <div class="bg-gray-50 rounded-lg p-4 mb-6">
                    <h3 class="font-medium mb-2">Topics Covered</h3>
                    <p class="text-gray-600">@consultation.Topics</p>
                </div>
                
                <div class="bg-gray-50 rounded-lg p-4 mb-6">
                    <h3 class="font-medium mb-2">Notes</h3>
                    <p class="text-gray-600">@consultation.Notes</p>
                </div>
                
                @if (consultation.Materials?.Count > 0)
                {
                    <div class="bg-gray-50 rounded-lg p-4">
                        <h3 class="font-medium mb-2">Materials Shared</h3>
                        <div class="space-y-2">
                            @foreach (var material in consultation.Materials)
                            {
                                <div class="flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                                    </svg>
                                    <a href="#" class="text-blue-600 hover:underline">@material.Title</a>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid ConsultationId { get; set; }
    
    private bool isLoading = true;
    private ConsultationDetail? consultation;
    private ReviewModel review = new ReviewModel { Rating = 0 };
    
    protected override async Task OnInitializedAsync()
    {
        await LoadConsultationAsync();
    }
    
    private async Task LoadConsultationAsync()
    {
        try
        {
            // In a real app, you'd fetch this from your API
            // Example: consultation = await Http.GetFromJsonAsync<ConsultationDetail>($"api/consultations/{ConsultationId}");
            
            // For demonstration, we'll create a sample consultation
            await Task.Delay(500); // Simulate network delay
            
            consultation = new ConsultationDetail
            {
                Id = ConsultationId,
                TeacherName = "Dr. Emily Johnson",
                Subject = "Advanced Calculus",
                StartTime = DateTime.Now.Date.AddDays(-2).AddHours(10),
                EndTime = DateTime.Now.Date.AddDays(-2).AddHours(11).AddMinutes(30),
                Topics = "Limits, Derivatives, Integration techniques, Applications of integration",
                Notes = "Went through several practice problems and clarified concepts on integration by parts. Student showed good understanding of the material by the end of the session.",
                Materials = new List<Material>
                {
                    new Material { Title = "Calculus Cheat Sheet.pdf" },
                    new Material { Title = "Integration Practice Problems.docx" }
                }
            };
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading consultation: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "Error", "Failed to load consultation data", "error");
            isLoading = false;
        }
    }
    
    private void SetRating(int rating)
    {
        review.Rating = rating;
    }
    
    private string GetRatingText()
    {
        return review.Rating switch
        {
            1 => "Poor",
            2 => "Fair",
            3 => "Good",
            4 => "Very Good",
            5 => "Excellent",
            _ => "Not rated"
        };
    }
    
    private string GetTeacherInitials()
    {
        if (string.IsNullOrEmpty(consultation?.TeacherName))
            return "T";
            
        var parts = consultation.TeacherName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[^1][0]}";
        else if (parts.Length == 1 && parts[0].Length > 0)
            return parts[0][0].ToString();
        else
            return "T";
    }
    
    private string GetDuration()
    {
        if (consultation == null)
            return "N/A";
            
        var duration = consultation.EndTime - consultation.StartTime;
        return duration.TotalHours >= 1 
            ? $"{Math.Floor(duration.TotalHours)} hr {duration.Minutes} min"
            : $"{duration.Minutes} min";
    }
    
    private async Task SubmitReview()
    {
        if (review.Rating == 0)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Warning", "Please provide a rating", "warning");
            return;
        }
        
        try
        {
            // In a real app, you'd post this to your API
            // Example: await Http.PostAsJsonAsync($"api/consultations/{ConsultationId}/review", review);
            
            // For demonstration, we'll just show a success message
            await JSRuntime.InvokeVoidAsync("showToast", "Success", "Review submitted successfully", "success");
            
            // Navigate back to consultations page
            NavigationManager.NavigateTo("/consultations");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting review: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "Error", "Failed to submit review", "error");
        }
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("/consultations");
    }
    
    public class ConsultationDetail
    {
        public Guid Id { get; set; }
        public string TeacherName { get; set; } = string.Empty;
        public string Subject { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Topics { get; set; } = string.Empty;
        public string Notes { get; set; } = string.Empty;
        public List<Material>? Materials { get; set; }
    }
    
    public class Material
    {
        public string Title { get; set; } = string.Empty;
    }
    
    public class ReviewModel
    {
        public int Rating { get; set; }
        public string Comment { get; set; } = string.Empty;
    }
}
