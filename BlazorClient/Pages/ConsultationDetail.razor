@page "/consultation/{Id:guid}"
@using BusinessLayer.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BlazorClient.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConsultationService ConsultationService
@inject ToastService ToastService
@attribute [Authorize]

<div class="max-w-4xl mx-auto">
    @if (consultation != null)
    {
        <div class="flex items-center space-x-2 mb-6">
            <button @onclick="NavigateBack" class="p-2 hover:bg-gray-100 rounded-full">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
            </button>
            <h1 class="text-2xl font-semibold">Consultation Details</h1>
        </div>
        
        <div class="bg-white shadow-md rounded-lg overflow-hidden mb-6">
            <!-- Header with status -->
            <div class="p-6 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-xl font-semibold mb-1">@consultation.Title</h2>
                        <p class="text-gray-600">@consultation.Topic</p>
                    </div>
                    <span class="px-3 py-1 text-sm font-medium rounded-full @GetStatusClass(consultation.Status)">
                        @consultation.Status
                    </span>
                </div>
            </div>
            
            <!-- Main content -->
            <div class="p-6 grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="md:col-span-2">
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-2">Description</h3>
                        <p class="text-gray-700">@consultation.Description</p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-2">Date and Time</h3>
                        <div class="flex flex-wrap gap-4">
                            <div class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                <span class="text-gray-700">@consultation.ScheduledAt.ToString("dddd, MMMM d, yyyy")</span>
                            </div>
                            <div class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span class="text-gray-700">@consultation.ScheduledAt.ToString("h:mm tt") - @consultation.ScheduledAt.AddMinutes(consultation.DurationMinutes).ToString("h:mm tt")</span>
                            </div>
                            <div class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span class="text-gray-700">@consultation.DurationMinutes minutes</span>
                            </div>
                        </div>
                    </div>
                    
                    @if (isTeacher && (consultation.Status == "Completed" || consultation.Status == "Scheduled"))
                    {
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-2">Notes</h3>
                            <textarea @bind="consultationNotes" 
                                     class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                     rows="4" 
                                     placeholder="Add notes about this consultation..."></textarea>
                            <div class="mt-2 flex justify-end">
                                <button @onclick="SaveNotes" class="bg-blue-600 text-white py-1 px-4 rounded hover:bg-blue-700">
                                    Save Notes
                                </button>
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(consultation.Description))
                    {
                        <div class="mb-6 p-4 bg-blue-50 rounded-md">
                            <h3 class="text-lg font-medium mb-2 text-blue-900">Teacher's Notes</h3>
                            <p class="text-blue-800 whitespace-pre-line">@consultation.Description</p>
                        </div>
                    }
                    
                    @if (consultation.Materials != null && consultation.Materials.Any())
                    {
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-2">Learning Materials</h3>
                            <div class="space-y-2">
                                @foreach (var material in consultation.Materials)
                                {
                                    <div class="flex items-center p-3 border border-gray-200 rounded-md hover:bg-gray-50">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                        </svg>
                                        <div class="flex-1">
                                            <div class="font-medium">@material.Title</div>
                                            <div class="text-sm text-gray-500">@material.Description</div>
                                        </div>
                                        <a href="@(!string.IsNullOrEmpty(material.ResourceUri) ? material.ResourceUri : "#")" target="_blank" download class="text-blue-600 hover:text-blue-800">
                                            Download
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                <div>
                    <div class="bg-gray-50 border border-gray-200 rounded-lg p-6">
                        <AuthorizeView Roles="Student">
                            <Authorized>
                                <h3 class="text-lg font-medium mb-4">Your Teacher</h3>
                                <div class="flex flex-col items-center mb-4">
                                    <div class="w-20 h-20 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 text-2xl font-bold mb-2">
                                        @consultation.TeacherName?.Substring(0, 1).ToUpper()
                                    </div>
                                    <div class="text-center">
                                        <div class="font-medium">@consultation.TeacherName</div>
                                        <div class="text-sm text-gray-600">Mathematics Department</div>
                                    </div>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                        
                        <AuthorizeView Roles="Teacher">
                            <Authorized>
                                <h3 class="text-lg font-medium mb-4">Student</h3>
                                <div class="flex flex-col items-center mb-4">
                                    <div class="w-20 h-20 rounded-full bg-green-100 flex items-center justify-center text-green-600 text-2xl font-bold mb-2">
                                        @consultation.StudentName?.Substring(0, 1).ToUpper()
                                    </div>
                                    <div class="text-center">
                                        <div class="font-medium">@consultation.StudentName</div>
                                        <div class="text-sm text-gray-600">Student</div>
                                    </div>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                        
                        <div class="border-t border-gray-200 pt-4 mt-4">
                            <h4 class="font-medium mb-2">Contact</h4>
                            <div class="text-sm text-gray-600 mb-2">
                                <div class="flex items-center mb-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                    </svg>
                                    teacher@example.com
                                </div>
                                <div class="flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                    </svg>
                                    (555) 123-4567
                                </div>
                            </div>
                        </div>
                        
                        @if (consultation.Status == "Scheduled" && consultation.ScheduledAt > DateTime.Now)
                        {
                            <div class="border-t border-gray-200 pt-4 mt-4">
                                <AuthorizeView Roles="Student">
                                    <Authorized>
                                        <button @onclick="CancelConsultation" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                            Cancel Consultation
                                        </button>
                                    </Authorized>
                                </AuthorizeView>
                                
                                <AuthorizeView Roles="Teacher">
                                    <Authorized>
                                        <div class="space-y-3">
                                            <button @onclick="StartConsultation" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                </svg>
                                                Start Consultation
                                            </button>
                                            
                                            <button @onclick="CancelConsultation" class="w-full flex items-center justify-center py-2 px-4 border border-red-300 rounded-md shadow-sm text-sm font-medium text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                                Cancel Consultation
                                            </button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        }
                        
                        @if (consultation.Status == "Scheduled" && consultation.ScheduledAt <= DateTime.Now && consultation.ScheduledAt.AddMinutes(consultation.DurationMinutes) >= DateTime.Now)
                        {
                            <AuthorizeView Roles="Teacher">
                                <Authorized>
                                    <div class="border-t border-gray-200 pt-4 mt-4">
                                        <button @onclick="StartConsultation" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            Start Consultation Now
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        }
                        
                        @if (consultation.Status == "Completed")
                        {
                            <AuthorizeView Roles="Student">
                                <Authorized>
                                    <div class="border-t border-gray-200 pt-4 mt-4">
                                        <button @onclick="LeaveReview" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                            </svg>
                                            Leave Review
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                            
                            <AuthorizeView Roles="Teacher">
                                <Authorized>
                                    <div class="border-t border-gray-200 pt-4 mt-4">
                                        <button @onclick="AddMaterials" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            Add Materials
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private ConsultationDto? consultation;
    private string? consultationNotes;
    private bool isTeacher = false;
    private bool isStudent = false;
    private bool isLoading = true;
    
    [CascadingParameter]
    private Task<AuthenticationState>? authStateTask { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        // Check user role
        if (authStateTask != null)
        {
            var authState = await authStateTask;
            isTeacher = authState.User.IsInRole("Teacher");
            isStudent = authState.User.IsInRole("Student");
        }
        
        await LoadConsultationDataAsync();
    }
    
    private async Task LoadConsultationDataAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            consultation = await ConsultationService.GetConsultationByIdAsync(Id);
            
            if (consultation != null)
            {
                // ConsultationDto might not have Notes property
                // consultationNotes = consultation.Notes;
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync("Failed to load consultation details", "Error");
            Console.Error.WriteLine($"Error loading consultation: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Scheduled" => "bg-blue-100 text-blue-800",
            "Completed" => "bg-green-100 text-green-800",
            "Cancelled" => "bg-red-100 text-red-800",
            "Pending" => "bg-yellow-100 text-yellow-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo(isTeacher ? "/my-consultations" : "/consultations");
    }
    
    private async Task CancelConsultation()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this consultation?");
        
        if (confirmed)
        {
            try
            {
                bool success = await ConsultationService.CancelConsultationAsync(Id);
                
                if (success)
                {
                    await ToastService.ShowSuccessAsync("Consultation cancelled successfully", "Success");
                    await LoadConsultationDataAsync(); // Reload the data to show updated status
                }
                else
                {
                    await ToastService.ShowErrorAsync("Failed to cancel consultation", "Error");
                }
            }
            catch (Exception ex)
            {
                await ToastService.ShowErrorAsync($"An error occurred: {ex.Message}", "Error");
                Console.Error.WriteLine($"Error cancelling consultation: {ex}");
            }
        }
    }
    
    private void StartConsultation()
    {
        NavigationManager.NavigateTo($"/consultation/start/{Id}");
    }
    
    private void LeaveReview()
    {
        NavigationManager.NavigateTo($"/review/{Id}");
    }
    
    private void AddMaterials()
    {
        NavigationManager.NavigateTo($"/materials/upload/{Id}");
    }
    
    private async Task SaveNotes()
    {
        if (consultation != null && !string.IsNullOrWhiteSpace(consultationNotes))
        {
            // Need to add notes field to ConsultationDto or create a dedicated API call for updating notes
            // consultation.Notes = consultationNotes;
            
            bool success = await ConsultationService.UpdateConsultationAsync(consultation);
            
            if (success)
            {
                await ToastService.ShowSuccessAsync("Notes saved successfully", "Success");
            }
            else
            {
                await ToastService.ShowErrorAsync("Failed to save notes", "Error");
            }
        }
    }
}
