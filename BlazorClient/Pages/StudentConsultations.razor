@page "/consultations"
@using BusinessLayer.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BlazorClient.Services
@attribute [Authorize(Roles = "Student")]
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConsultationService ConsultationService
@inject ToastService ToastService
@implements IDisposable

<div class="bg-gray-50 min-h-screen p-6">
    <div class="max-w-7xl mx-auto">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-semibold text-gray-800">My Consultations</h1>
            <a href="/bookings" class="flex items-center bg-blue-600 hover:bg-blue-700 transition-colors duration-200 text-white py-2 px-4 rounded-md shadow-sm">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                Book New Consultation
            </a>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center items-center h-64">
                <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        }
        else
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @if (consultations.Any())
                {
                    @foreach (var consultation in consultations)
                    {
                        <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow border border-gray-100 overflow-hidden animate-fade-in">
                            <div class="p-5">
                                <h2 class="text-lg font-semibold mb-2 text-gray-800">@consultation.Title</h2>
                                
                                <div class="flex items-center mb-3">
                                    <span class="w-4 h-4 rounded-full bg-blue-500 mr-2"></span>
                                    <span class="text-sm text-gray-600">@consultation.Topic</span>
                                </div>
                                
                                <p class="text-gray-600 mb-4 line-clamp-2">@consultation.Description</p>
                                
                                <div class="flex items-center mb-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <span class="text-sm text-gray-600">@consultation.ScheduledAt.ToString("dddd, MMMM d, yyyy")</span>
                                </div>
                                
                                <div class="flex items-center mb-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <span class="text-sm text-gray-600">@consultation.ScheduledAt.ToString("h:mm tt") - @consultation.ScheduledAt.AddMinutes(consultation.DurationMinutes).ToString("h:mm tt")</span>
                                </div>
                                
                                <div class="flex justify-between items-center">
                                    <div class="flex items-center">
                                        <div class="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-sm font-medium text-gray-600 mr-2">
                                            @(string.IsNullOrEmpty(consultation.TeacherName) ? "T" : consultation.TeacherName.Substring(0, 1).ToUpper())
                                        </div>
                                        <span class="text-sm font-medium text-gray-700">@consultation.TeacherName</span>
                                    </div>
                                    
                                    <span class="px-2 py-1 text-xs font-semibold rounded-full @GetStatusClass(consultation.Status)">
                                        @consultation.Status
                                    </span>
                                </div>
                                
                                <div class="mt-4 pt-4 border-t border-gray-100 flex space-x-2">
                                    <a href="/consultation/@consultation.Id" class="flex-1 bg-blue-600 hover:bg-blue-700 transition-colors duration-200 text-white text-center py-2 px-4 rounded-md shadow-sm">
                                        View Details
                                    </a>
                                    
                                    @if (consultation.Status == "Scheduled" && consultation.ScheduledAt > DateTime.Now)
                                    {
                                        <button @onclick="() => CancelConsultationAsync(consultation.Id)" 
                                                class="flex-1 bg-white hover:bg-red-50 text-red-600 border border-red-300 text-center py-2 px-4 rounded-md transition-colors duration-200">
                                            Cancel
                                        </button>
                                    }
                                    else if (consultation.Status == "Completed")
                                    {
                                        <button @onclick="() => NavigateToReview(consultation.Id)"
                                                class="flex-1 bg-white hover:bg-yellow-50 text-yellow-600 border border-yellow-300 text-center py-2 px-4 rounded-md transition-colors duration-200">
                                            Leave Review
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-span-full flex flex-col items-center justify-center bg-white rounded-lg p-8 border border-gray-100 shadow-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        <h3 class="text-lg font-medium text-gray-900 mb-1">No consultations found</h3>
                        <p class="text-gray-600 mb-4 text-center">You haven't booked any consultations yet.</p>
                        <a href="/bookings" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md shadow-sm transition-colors duration-200">
                            Book a Consultation
                        </a>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<ConsultationDto> consultations = new List<ConsultationDto>();
    private bool isLoading = true;
    private System.Threading.Timer? autoRefreshTimer;
    
    protected override async Task OnInitializedAsync()
    {
        // Fetch consultations from the API
        await LoadConsultationsAsync();
        
        // Setup a refresh timer to periodically update the consultations
        autoRefreshTimer = new System.Threading.Timer(async _ => 
        {
            await LoadConsultationsAsync();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromMinutes(2), TimeSpan.FromMinutes(2));
    }
    
    private async Task LoadConsultationsAsync()
    {
        try
        {
            isLoading = true;
            consultations = (await ConsultationService.GetStudentConsultationsAsync()).ToList();
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync("Failed to load consultations", "Error");
            Console.Error.WriteLine($"Error loading consultations: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Scheduled" => "bg-blue-100 text-blue-800",
            "Completed" => "bg-green-100 text-green-800",
            "Cancelled" => "bg-red-100 text-red-800",
            "Pending" => "bg-yellow-100 text-yellow-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    
    private async Task CancelConsultationAsync(Guid consultationId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this consultation?");
        
        if (confirmed)
        {
            try
            {
                bool success = await ConsultationService.CancelConsultationAsync(consultationId);
                
                if (success)
                {
                    await ToastService.ShowSuccessAsync("Consultation cancelled successfully", "Success");
                    await LoadConsultationsAsync(); // Reload the list to show updated status
                }
                else
                {
                    await ToastService.ShowErrorAsync("Failed to cancel consultation", "Error");
                }
            }
            catch (Exception ex)
            {
                await ToastService.ShowErrorAsync($"An error occurred: {ex.Message}", "Error");
                Console.Error.WriteLine($"Error cancelling consultation: {ex}");
            }
        }
    }
    
    private void NavigateToReview(Guid consultationId)
    {
        NavigationManager.NavigateTo($"/review/{consultationId}");
    }
    
    public void Dispose()
    {
        // Dispose the timer to prevent memory leaks
        autoRefreshTimer?.Dispose();
    }
}
