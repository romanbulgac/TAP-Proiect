using BlazorClient.Models;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Authorization;
using System.Net.Http.Headers;
using System.Net.Http.Json;

namespace BlazorClient.Services
{
    /// <summary>
    /// HTTP message handler that automatically adds authentication headers and handles token refresh
    /// </summary>
    public class AuthorizationMessageHandler : DelegatingHandler
    {
        private readonly ITokenService _tokenService;
        private readonly ILogger<AuthorizationMessageHandler> _logger;
        private readonly NavigationManager _navigationManager;
        private readonly AuthenticationStateProvider _authStateProvider;
        private readonly SemaphoreSlim _refreshTokenSemaphore = new SemaphoreSlim(1, 1);

        public AuthorizationMessageHandler(
            ITokenService tokenService,
            AuthenticationStateProvider authStateProvider,
            ILogger<AuthorizationMessageHandler> logger,
            NavigationManager navigationManager)
        {
            _tokenService = tokenService;
            _authStateProvider = authStateProvider;
            _logger = logger;
            _navigationManager = navigationManager;
        }

        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
        {
            // Skip auth header for authentication endpoints
            var requestUri = request.RequestUri?.ToString().ToLowerInvariant() ?? string.Empty;
            if (requestUri.Contains("/auth/login") || requestUri.Contains("/auth/register"))
            {
                return await base.SendAsync(request, cancellationToken);
            }

            // Add JWT auth header
            var token = await _tokenService.GetAccessTokenAsync();
            
            if (!string.IsNullOrEmpty(token))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            
            var response = await base.SendAsync(request, cancellationToken);
            
            // Handle 401 Unauthorized
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                // Ensure only one refresh attempt at a time
                await _refreshTokenSemaphore.WaitAsync(cancellationToken);
                try
                {
                    // Check again in case another thread already refreshed the token
                    token = await _tokenService.GetAccessTokenAsync();
                    if (!string.IsNullOrEmpty(token) && token != request.Headers.Authorization?.Parameter)
                    {
                        // Token was already refreshed by another request, retry with new token
                        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                        return await base.SendAsync(request, cancellationToken);
                    }
                    
                    // Try to refresh token
                    var isTokenRefreshed = await RefreshTokenAsync();
                    
                    if (isTokenRefreshed)
                    {
                        // Retry the request with new token
                        var newToken = await _tokenService.GetAccessTokenAsync();
                        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", newToken);
                        return await base.SendAsync(request, cancellationToken);
                    }
                    else
                    {
                        // Logout if refresh fails
                        await _tokenService.ClearTokensAsync();
                        if (_authStateProvider is CustomAuthenticationStateProvider customAuthState)
                        {
                            await customAuthState.MarkUserAsLoggedOut();
                        }
                        _navigationManager.NavigateTo("/login", true);
                    }
                }
                finally
                {
                    _refreshTokenSemaphore.Release();
                }
            }
            
            return response;
        }

        private async Task<bool> RefreshTokenAsync()
        {
            try
            {
                var refreshToken = await _tokenService.GetRefreshTokenAsync();
                
                if (string.IsNullOrEmpty(refreshToken))
                    return false;
                
                // Create a new HttpClient specifically for this refresh call to avoid circular reference
                using var client = new HttpClient { BaseAddress = new Uri(_navigationManager.BaseUri) };
                var response = await client.PostAsJsonAsync("api/Auth/refresh", new { RefreshToken = refreshToken });
                
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                    
                    if (result != null && result.Successful && !string.IsNullOrEmpty(result.Token))
                    {
                        // Store new tokens
                        await _tokenService.StoreTokensAsync(
                            result.Token, 
                            result.RefreshToken ?? string.Empty, 
                            result.ExpiresIn ?? 3600);
                        
                        // Update auth state    
                        if (_authStateProvider is CustomAuthenticationStateProvider customAuthState)
                        {
                            await customAuthState.MarkUserAsAuthenticated(
                                result.Token, 
                                result.RefreshToken ?? string.Empty, 
                                result.ExpiresIn ?? 3600);
                        }
                            
                        return true;
                    }
                }
                
                return false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error refreshing token");
                return false;
            }
        }
    }
}
